<h1>投稿編集画面</h1>

<div class="dinner">

<div class="dinner__form">
 <%= form_with model: @dinner, url: dinner_path(@dinner.id), local: true, method: :patch do |f| %>

 <div>
  <%= f.label :dinner_image,"image" %>
  <%= f.file_field :dinner_image, accept: "image/*" %>
 </div>

 <div>
 <%= f.label :title, "Title" %>
 <%= f.text_field :title, placeholder: "タイトル", autofocus: true %>
 </div>

 <div>
 <%= f.label :genre_id, "Genre" %>
 <%= f.collection_select :genre_id, Genre.all, :id, :name, include_blank: "-- 選択してください --" %>
 </div>

 <div>
 <%= f.label :cost, "COST" %>
 <!--一番大きい位1~9、以降の位0~9の半角数字のみ許可-->
 &yen;<%= f.text_field :cost, pattern:"^[1-9][0-9]*$",autofocus: true %>
 </div>

 <div>
 <%= f.label :memo, "MEMO" %>
 <%= f.text_area :memo, placeholder: "レシピや参考URLを入力してください",autofocus: true %>
 </div>

 <div>
   <%= f.radio_button :style, :eating_out%>
   <%= f.label :style, "外食" %>
   <%= f.radio_button :style, :taking_in%>
   <%= f.label :style, "中食" %>
   <%= f.radio_button :style, :home_cooking%>
   <%= f.label :style, "内食" %>
 </div>

 <div>
   <%= f.label :is_posted,"アルバムに登録" %>
   <%= f.check_box :is_posted, id: :dinner_is_posted, :as => :boolean %>
 </div>

 <%= f.collection_check_boxes(:tag_ids, @dinner.tags, :id, :name) do |tag| %>
  <%= tag.label do %>
    <%= tag.check_box + tag.text%>
  <% end %>
<% end %>

 <div class="tag-form">
  <span>
    <%# 文字を入力するためだけのフィールド。入力された値は送信する必要がないので、nameの指定はしていない。%>
    <%= text_field_tag nil, nil, {class: "tag-field"} %>
  </span>
  <span class="add-tag">追加</span>
  </div>

 <%= f.submit "更新する"%>

  <% end %>
</div>
</div>

<script>
 $(function () {
  var tag_field = '.tag-field'
  var tag_form = '.tag-form'

  // 追加ボタンを押した時の処理(入力された内容を元にチェックボックスを随時追加)
  var add_tag = function () {
    // エラーメッセージが存在する場合、削除
    if ($(".tag-alert").length) {
      $(".tag-alert").remove()
    }
    // 入力内容を取得added_tags
    tag_name = $(tag_field).val().trim()
    // 追加済みのタグを詰め込む箱
    added_tags = []
    // 追加済みのタグを取得して配列に詰め込む
    $(".tag-label").each(function () {
      added_tags.push($(this).text().trim())
    });

    // 追加済みのタグと追加予定のタグの重複チェック
    is_duplicate = added_tags.some(value => value === tag_name)

    // 空ではなく、追加済みのタグと重複していない場合、追加
    if (tag_name && !is_duplicate) {
      // パラメータで渡す際に値が被るのを防ぐため現時刻を取得(被っていると統合されて複数渡せないため)
      var id = new Date().getTime();

      // 検索タグを登録できるチェックボックスを追加(入力内容を保持)
      $(tag_form).before($(`<label class="tag-label"><input class='tag-input' type='checkbox' checked='checked'  name='dinner[tags_attributes][${id}][name]' value=${tag_name}>${' ' + tag_name}</label>`))

      // チェックボックス追加後、入力フォームをリセット
      $(tag_field).val('')
    }
    // 追加済みのタグと重複している場合、エラーメッセージを表示
    if (is_duplicate) {
      $(tag_form).after($(`<p class="tag-alert">※既に存在するタグです。</p>`))
    }
  }
 $('.add-tag').on('click', add_tag); //追加イベント発火
});
</script>